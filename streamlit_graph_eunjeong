###################################트리맵#############################################

import streamlit as st
import pandas as pd
import plotly.express as px

# CSV 파일 경로
CSV_FILE_PATH = 'ticker_data.csv'

# 데이터 로드
@st.cache
def load_data():
    return pd.read_csv(CSV_FILE_PATH)

df = load_data()

# Streamlit 앱 제목
st.title('SCHD ETF Companies by Sector')

# 데이터 미리보기
st.subheader('Data Preview')
st.write(df.head())

# 트리맵 시각화
fig = px.treemap(df, 
                 path=['Sector', 'Name'], 
                 values='MarketCap',
                 title='SCHD ETF Companies Treemap by Sector')

st.plotly_chart(fig)

###################################6개 비교 그래프#############################################

import pandas as pd
import yfinance as yf
import streamlit as st
import plotly.express as px

dividend_stocks = ['AAPL', 'MSFT', 'KO']  # 예시: 배당주 티커
non_dividend_stocks = ['GOOGL', 'AMZN', 'TSLA']  # 예시: 비배당주 티커

# 데이터 수집 함수
def get_stock_data(tickers, start_date, end_date):
    data = {}
    for ticker in tickers:
        stock = yf.Ticker(ticker)
        df = stock.history(start=start_date, end=end_date, actions=True)
        df['Ticker'] = ticker
        data[ticker] = df
    return pd.concat(data.values())

# 데이터 가져오기
start_date = '2024-01-01'
end_date = '2024-07-01'
dividend_data = get_stock_data(dividend_stocks, start_date, end_date)
non_dividend_data = get_stock_data(non_dividend_stocks, start_date, end_date)

# 배당금 포함된 데이터 처리
def calculate_total_return(df):
    df['Dividend'] = df['Dividends']
    df['Total Return'] = (df['Close'] + df['Dividend']) / df['Close'].shift(1) - 1
    return df

# 배당주와 비배당주 데이터를 하나의 데이터프레임으로 결합
dividend_data = calculate_total_return(dividend_data)
non_dividend_data = calculate_total_return(non_dividend_data)
combined_data = pd.concat([dividend_data, non_dividend_data])

# Streamlit 애플리케이션
st.subheader('Dividend vs Non-Dividend Stock Total Return Comparison')

# Plotly 그래프 생성
fig = px.line(
    combined_data, 
    x=combined_data.index, 
    y='Total Return', 
    color='Ticker', 
    labels={'Total Return': 'Total Return', 'index': 'Date'}, 
    title='Total Return Comparison'
)

fig.update_traces(opacity=0.6) # 선의 투명도 설정
fig.update_yaxes(range=[-0.15, 0.15])
st.plotly_chart(fig)

#######################################3개씩 평균낸 비교 그래프#########################################
#위와 이어짐
import plotly.graph_objs as go

# 배당주와 비배당주의 평균 수익률 계산
def calculate_group_average(df, tickers):
    df_group = df[df['Ticker'].isin(tickers)]
    avg_return = df_group.groupby(df_group.index)['Total Return'].mean()
    return avg_return

# 평균 수익률 계산
dividend_avg_return = calculate_group_average(dividend_data, dividend_stocks)
non_dividend_avg_return = calculate_group_average(non_dividend_data, non_dividend_stocks)
combined_data2 = pd.concat([dividend_avg_return, non_dividend_avg_return])

# Streamlit 애플리케이션
st.subheader('Average Total Return Comparison: Dividend vs Non-Dividend Stocks')
fig = go.Figure()

# 배당주 평균 수익률 선 추가
fig.add_trace(go.Scatter(
    x=dividend_avg_return.index, 
    y=dividend_avg_return, 
    mode='lines', 
    name='Dividend Stocks',
    line=dict(color='blue', width=2)  # 선 색상 및 너비 지정
))

# 비배당주 평균 수익률 선 추가
fig.add_trace(go.Scatter(
    x=non_dividend_avg_return.index, 
    y=non_dividend_avg_return, 
    mode='lines', 
    name='Non-Dividend Stocks',
    line=dict(color='red', width=2)  # 선 색상 및 너비 지정
))

fig.update_traces(opacity=0.6)  # 선의 투명도 설정
fig.update_yaxes(range=[-0.05, 0.05])
# 그래프 제목 및 레이블 설정
fig.update_layout(
    title='Average Total Return Comparison: Dividend vs Non-Dividend Stocks',
    xaxis_title='Date',
    yaxis_title='Total Return'
)
st.plotly_chart(fig)

####################################ETF별 비교 시각화 4가지############################################

import streamlit as st
import pandas as pd
import plotly.express as px

# CSV 파일 읽기
df = pd.read_csv("/Users/yej/Downloads/etf_companies_info.csv")

# Group data by ETF
etf_summary = df.groupby('ETF').agg({
    'AUM': 'mean',
    'Dividend Yield': 'mean',
    #'Expense Ratio': 'mean',
    'YTD Return': 'mean',
    '5-Year Avg Return': 'mean'
}).reset_index()

# Start Streamlit application
st.title('ETF Performance Comparison Visualization')
# Visualize ETF performance data
st.subheader('Average AUM, Dividend Yield, Expense Ratio, and Returns by ETF')

# AUM Visualization
st.subheader('Average AUM by ETF')
fig = px.bar(etf_summary, x='ETF', y='AUM', title='Average AUM by ETF', labels={'AUM': 'Average AUM ($)', 'ETF': 'ETF'}, color_discrete_sequence=['skyblue'])
# Show plotly chart in Streamlit
st.plotly_chart(fig)

# Dividend Yield Visualization
st.subheader('Average Dividend Yield by ETF')
fig = px.bar(etf_summary, x='ETF', y='Dividend Yield', title='Average Dividend Yield by ETF', labels={'Dividend Yield':'Dividend Yield' , 'ETF': 'ETF'}, color_discrete_sequence=['#e377c2'])
st.plotly_chart(fig)

# YTD Return Visualization
st.subheader('Average YTD Return by ETF')
fig = px.bar(etf_summary, x='ETF', y='YTD Return', title='Average YTD Return by ETF', labels={'YTD Return': 'YTD Return', 'ETF': 'ETF'}, color_discrete_sequence=['#2ca02c'])
st.plotly_chart(fig)

# 5-Year Average Return Visualization
st.subheader('Average 5-Year Avg Return by ETF')
fig = px.bar(etf_summary, x='ETF', y='5-Year Avg Return', title='Average 5-Year Avg Return by ETF', labels={'5-Year Avg Return': '5-Year Avg Return', 'ETF': 'ETF'}, color_discrete_sequence=['#9467bd'])
st.plotly_chart(fig)

######################################축 선택 그래프##########################################

import streamlit as st
import plotly.express as px
import pandas as pd

# CSV 파일 읽기
df = pd.read_csv("/Users/yej/Downloads/etf_companies_info.csv")

# Plot settings
colors = {'VYM': 'blue', 'VIG': 'green', 'SCHD': 'red'}

# Streamlit 애플리케이션 레이아웃 정의
st.title('ETF Performance Scatter Plot Analysis')

# X축 선택 옵션
x_axis = st.selectbox(
    "Select X-axis:",
    options=['AUM', 'Dividend Yield', 'YTD Return', '5-Year Avg Return'],
    index=0
)

# Y축 선택 옵션
y_axis = st.selectbox(
    "Select Y-axis:",
    options=['AUM', 'Dividend Yield', 'YTD Return', '5-Year Avg Return'],
    index=1
)

# Scatter plot 생성
fig = px.scatter(
    df, 
    x=x_axis, 
    y=y_axis, 
    color='ETF',
    color_discrete_map=colors,
    hover_name='Company Name',  # Hover 시 종목 이름 표시
    labels={
        'AUM': 'AUM ($)',
        'Dividend Yield': 'Dividend Yield (%)',
        'Expense Ratio': 'Expense Ratio (%)',
        'YTD Return': 'YTD Return (%)',
        '5-Year Avg Return': '5-Year Avg Return (%)'
    }
)

fig.update_layout(title=f'Scatter Plot of {x_axis} vs {y_axis} by ETF')
st.plotly_chart(fig)


##################################시간의 흐름에 따른 그래프#########################################

import yfinance as yf
import pandas as pd
import plotly.express as px
import streamlit as st
from datetime import datetime

# Streamlit 설정
st.title("Coca-Cola Stock Price vs. Inflation Rate Over Time")

# 데이터 수집
ticker = 'KO'
start_date = "2010-01-01"
end_date = datetime.today().strftime('%Y-%m-%d')

# 코카콜라 주가 데이터 가져오기
ko_data = yf.download(ticker, start=start_date, end=end_date)
ko_data['Price Change %'] = ko_data['Adj Close'].pct_change() * 100

# 인플레이션율 데이터 (CPI 데이터)
cpi_data = pd.read_csv('/Users/yej/Downloads/CPIAUCSL.csv', parse_dates=['DATE'], index_col='DATE')
cpi_data = cpi_data.rename(columns={'VALUE': 'CPIAUCSL'})

# 인플레이션율 계산 (CPI 변화율)
cpi_data['Inflation Rate %'] = cpi_data['CPIAUCSL'].pct_change() * 100

# 두 데이터셋 병합
merged_data = pd.merge(ko_data, cpi_data[['Inflation Rate %']], left_index=True, right_index=True, how='inner')

# 색상 변화 (시간에 따른 색상 연해짐 구현)
color_gradient = px.colors.sequential.Blues  # 색상 팔레트 선택
merged_data['color'] = pd.cut(merged_data.index.map(pd.Timestamp.toordinal), bins=len(color_gradient), labels=color_gradient)

# 시각화
fig = px.line(merged_data, x='Inflation Rate %', y='Adj Close', color='color', title="Coca-Cola Stock Price vs. Inflation Rate",
              labels={"Inflation Rate %": "Inflation Rate (%)", "Adj Close": "Coca-Cola Stock Price (Adjusted Close)"},
              color_discrete_map='identity')

fig.update_traces(mode='lines+markers', line=dict(width=2))
st.plotly_chart(fig)

##################################배당주 비배당주 주가 비교#########################################

import yfinance as yf
import pandas as pd
import plotly.express as px
import streamlit as st
from datetime import datetime
from pandas_datareader import data as pdr

# Streamlit 설정
st.title("Dividend vs. Non-Dividend Stocks During Low Inflation Periods")

# 데이터 수집
dividend_ticker = 'MSFT'  # 배당주
non_dividend_ticker = 'TSLA'  # 비배당주
start_date = "2010-01-01"
end_date = datetime.today().strftime('%Y-%m-%d')

# 코카콜라와 애플 주가 데이터 가져오기
dividend_data = yf.download(dividend_ticker, start=start_date, end=end_date)
non_dividend_data = yf.download(non_dividend_ticker, start=start_date, end=end_date)

# 비율 변동 계산
dividend_data['Price Change %'] = dividend_data['Adj Close'].pct_change() * 100
non_dividend_data['Price Change %'] = non_dividend_data['Adj Close'].pct_change() * 100

# 인플레이션 데이터 가져오기 (FRED의 CPIAUCSL)
inflation_data = pdr.get_data_fred('CPIAUCSL', start=start_date, end=end_date)

# 인플레이션율 계산 (전년 동기 대비 변화율)
inflation_data['Inflation Rate %'] = inflation_data['CPIAUCSL'].pct_change(periods=12) * 100

# 주가 데이터와 인플레이션 데이터 병합
merged_dividend_data = pd.merge(dividend_data, inflation_data, left_index=True, right_index=True, how='inner')
merged_non_dividend_data = pd.merge(non_dividend_data, inflation_data, left_index=True, right_index=True, how='inner')

# 저인플레이션기 정의 (예: 인플레이션 1% 이하)
low_inflation_periods = merged_dividend_data[merged_dividend_data['Inflation Rate %'] <= 1]

# 배당주와 비배당주 데이터 비교 시각화
fig = px.line(title="Dividend vs. Non-Dividend Stocks During Low Inflation Periods")

# 배당주 주가 추가
fig.add_scatter(x=low_inflation_periods.index, y=low_inflation_periods['Adj Close'], mode='lines', name='MSFT (div)', line=dict(color='blue'))
# 비배당주 주가 추가
fig.add_scatter(x=merged_non_dividend_data.loc[low_inflation_periods.index].index, y=merged_non_dividend_data.loc[low_inflation_periods.index]['Adj Close'], mode='lines', name='TSLA (non-div)', line=dict(color='red'))
fig.update_layout(xaxis_title="Date", yaxis_title="Stock Price (Adjusted Close)", legend_title="Stock Ticker")
st.plotly_chart(fig)
